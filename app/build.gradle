apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-kapt"
apply plugin: 'io.fabric'

//def keystoreFile = rootProject.file("set_the_goal_keystore.properties")
//def keystoreProperties = new Properties()
//keystoreProperties.load(new FileInputStream(keystoreFile))

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.getz.setthegoal"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            manifestPlaceholders = [crashlyticsEnabled: false]
        }
        release {
            minifyEnabled false
            debuggable false
            manifestPlaceholders = [crashlyticsEnabled: true]
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        all {
            /**
             * 'SetTheGoal_TexterraApiKey' is a constant which is placed in Global gradle.properties
             * config file in the hidden directory user/.gradle/gradle.properties
             * You can get your own key here: https://api.ispras.ru/new_key
             * */
            buildConfigField 'String', "TexterraApiKey", SetTheGoal_TexterraApiKey
            buildConfigField 'String', "IBMTranslatorApiKey", SetTheGoal_IBMTranslatorApiKey
            buildConfigField 'String', "UnsplashClientKey", SetTheGoal_UnsplashClientKey
        }
    }
//    signingConfigs {
//        release {
//            storeFile file(keystoreProperties['pathToKeystoreFile'])
//            keyAlias = keystoreProperties['alias']
//            storePassword keystoreProperties['storePass']
//            keyPassword keystoreProperties['keyPass']
//        }
//    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            String apkVersion = "${variant.buildType.name}-v${variant.versionName}.(${variant.versionCode})"
            buildConfigField 'String', 'APK_VERSION', "\"${apkVersion}\""
            outputFileName = "SetTheGoal-${apkVersion}.apk"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    //uses to get @Parcelize annotation
    androidExtensions {
        experimental = true
    }
}

def new_material_components = '1.1.0-alpha09'
def kodein = '6.3.3'
def retrofit = '2.6.1'
def okhttp = '3.14.1'
def gson = '2.8.5'
def coroutines = '1.3.1'
def lifecycle = '2.1.0'
def glide = '4.9.0'
def work_version = '2.2.0'

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "com.google.android.material:material:$new_material_components"

    //Kodein
    implementation "org.kodein.di:kodein-di-generic-jvm:$kodein"
    implementation "org.kodein.di:kodein-di-framework-android-x:$kodein"

    //Network
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.okhttp3:okhttp:$okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp"
    implementation "com.google.code.gson:gson:$gson"

    //Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    //Lifecycle ViewModel
    implementation "androidx.lifecycle:lifecycle-livedata-core:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle"

    //Glide
    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide"
    implementation "com.github.bumptech.glide:annotations:$glide"

    //Lottie animation
    implementation "com.airbnb.android:lottie:3.0.7"

    //Firebase
    implementation 'com.google.firebase:firebase-analytics:17.2.1'
    implementation "com.google.firebase:firebase-crash:16.2.1"
    implementation 'com.google.firebase:firebase-auth:19.1.0'
    implementation 'com.google.firebase:firebase-firestore:21.3.0'

    //Google auth
    implementation 'com.google.android.gms:play-services-auth:17.0.0'

    //Crashlytics
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    //WorkManager (JobScheduler is available from 23+ api)
    implementation "androidx.work:work-runtime-ktx:$work_version"

    //JodaTime
    implementation 'net.danlew:android.joda:2.10.3'

    /**
     * Here we have an exclude for IBM translator because it had duplicate conflicts
     * with other dependency.
     * */
    implementation('com.ibm.watson:language-translator:7.4.0') {
        exclude group: 'com.google.code.findbugs'
    }

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

apply plugin: 'com.google.gms.google-services'
